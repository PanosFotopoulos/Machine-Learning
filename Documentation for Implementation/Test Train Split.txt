First thing first, import important libraries
 -import pandas as pd
 -import numpy as np
 -import seaborn as sns
 -import matplotlib as plt

define you dataframe from your data df = pd.read_csv('mycsv')
In order to complete a machine learning project, you need a variable to asign your training data and one more variable to asign your prediction data
for this excactly situation you sklearn library created a tool that split ur dataframe in a percent of ur choice, so.

--- modify your train data and your prefict data ---
From sklearn.model_selection import train_test_split.   X_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.3,random_state=101)
Now, check if u need to drop a column (most likely will be the column you want to predict)
As we see there are two variables X,y with X_train, X_test, y_train, y_test, so now lets define this variable
X = df.drop('prediction_column',axis = 1)
y = df['prediction_column']

Keep in mind i train my model on X_train to predict y_train, and then from X_test predict y_test

Standardization --- import scaler (optimal) and scale ur data---
Standardization helps to ensure that each feature contributes equally to the model.
from sklearn.preprocessing import StandarScaler 
Mean = 0: The average value of each feature will be zero
Variance = 1: The standard deviation of each feature will be one, meaning the data will be spread out in a standard normal distribution.

Mean Calculation(.mean()):

Mean =  (-1.34164079 + ( -  0.4472136 ) + 0.4472136 + 1.34164079) / 4 = 0, The mean is 0, as expected.

Standard Deviation Calculation(.std()):

Variance = (-1.34164079-0)^2 + (-0.4472136-0)^2 + (0.4472136-0)^2 + (1.34164079-0)^2 / 4 = 1, Taking the square root of the variance gives us the standard deviation, which is 1.

Now that is very clear what mean and std is and how scaler works lets scale our data.

First step. Allow the scaler to learn how to scale the data properly with .fit

scaler.fit(X_train) In this step computes the mean and the standard deviation of each feature in X_train, Only fit on training data to prevend data leakage (SOS)
 
Second step. Transfrom our data

X_train = scaler.transfrom(X_train)
X_test = scaler.transform(X_test) 

--- Import Model ---
Now all the datas are ready to go. We need to import a model to fit. This can be what ever model actually help us to achive our goal, lets see how we code it.

from sklearn.linear_model import Your desire model
from sklearn.linear_model import Ridge
from sklearn.linear_model import LinearRegression

For the most of the models now the way of the implementation is pretty straight forward

Ridge_model = Ridge(alpha=1) 
LinearRegression_model = LinearRegression()

Train the data to the model

Ridge_model.fit(X_train,y_train)
LinearRegression_model.fit(X_train,y_train).

On this stage lets remind our steps. We starting with splitting the data to 70% train 30% testing , we transform the train data with the scaler, we imported our model
and we just trained. Let's predict now our 30% y_pred

Ridge_y_prediction = model.predict(X_train)
LinearRegression_y_prediction= model.predict(X_train)

--- Model evaluation ---
Last step lets evaluate our model 

from sklearn.metrics import mean_squared_error

mean_squared_error(y_test,y_pred)